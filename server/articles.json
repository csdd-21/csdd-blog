[{
  "_id": {
    "$oid": "60acb28553480e69848a2245"
  },
  "tags": [
    "CSS",
    "JavaScript"
  ],
  "abstracts": "Unlike most of the application methods, `mount` does not return the application. Instead it returns the root component instance.  Although not strictly associated with the [MVVM pattern (opens new window)](https://en.wikipedia.org/wiki/Model_View_ViewModel), Vue's design was partly inspired by it. As a convention, we often use the variable `vm` (short for ViewModel) to refer to a component instance.  While all the examples on this page only need a single component, most r",
  "parent": "study",
  "title": "test_study_1",
  "createdDate": "2020-01-01",
  "imgUrl": ""
},{
  "_id": {
    "$oid": "60acb2ccfcabf0d99f5b6827"
  },
  "tags": [
    "CSS"
  ],
  "abstracts": "While all the examples on this page only need a single component, most real applications are organized into a tree of nested, reusable components. For example, a Todo application's component tree might look like this:",
  "parent": "study",
  "title": "test_study_2",
  "createdDate": "2020-01-02"
},{
  "_id": {
    "$oid": "60acb3e6fcabf0d99f5b6829"
  },
  "tags": [
    "CSS"
  ],
  "parent": "study",
  "title": "test_study_3",
  "createdDate": "2020-01-03",
  "abstracts": "Each component will have its own component instance, `vm`. For some components, such as `TodoItem`, there will likely be multiple instances rendered at any one time. All of the component instances in this application will share the same application instance.  We'll talk about [the component system](https://v3.vuejs.org/guide/component-basics.html) in detail later. For now, just be aware that the root component isn't really any different from any oth"
},{
  "_id": {
    "$oid": "60ad03b8fcabf0d99f5b682c"
  },
  "tags": [
    "JavaScript"
  ],
  "abstracts": "There are various other component options that add user-defined properties to the component instance, such as `methods`, `props`, `computed`, `inject` and `setup`. We'll discuss each of these in depth later in the guide. All of the properties of the component instance, no matter how they are defined, will be accessible in the component's template.  Vue also exposes some built-in properties via the component instance, such as `$attrs` and `$emit`. These properties all have a `$` prefix to avoid conflicting with user-defined property names.",
  "parent": "study",
  "title": "test_study_4",
  "createdDate": "2020-01-04"
},{
  "_id": {
    "$oid": "60ad0bbcfcabf0d99f5b682d"
  },
  "parent": "life",
  "title": "test_life_1",
  "tags": [
    "Music"
  ],
  "abstracts": "Unlike most of the application methods, `mount` does not return the application. Instead it returns the root component instance.  Although not strictly associated with the [MVVM pattern (opens new window)](https://en.wikipedia.org/wiki/Model_View_ViewModel), Vue's design was partly inspired by it. As a convention, we often use the variable `vm` (short for ViewModel) to refer to a component instance.  While all the examples on this page only need a single component, most r",
  "imgUrl": "/life/test_life_1.jpeg",
  "createdDate": "2020-05-01"
},{
  "_id": {
    "$oid": "60ad0bc0fcabf0d99f5b682e"
  },
  "parent": "life",
  "title": "test_life_2",
  "tags": [
    "Memory",
    "Music"
  ],
  "abstracts": "While all the examples on this page only need a single component, most real applications are organized into a tree of nested, reusable components. For example, a Todo application's component tree might look like this:",
  "imgUrl": "/life/test_life_2.jpeg",
  "createdDate": "2020-05-02"
},{
  "_id": {
    "$oid": "60ad0bc4fcabf0d99f5b682f"
  },
  "parent": "life",
  "title": "test_life_3",
  "tags": [
    "Travel",
    "Memory"
  ],
  "abstracts": "Each component will have its own component instance, `vm`. For some components, such as `TodoItem`, there will likely be multiple instances rendered at any one time. All of the component instances in this application will share the same application instance.  We'll talk about [the component system](https://v3.vuejs.org/guide/component-basics.html) in detail later. For now, just be aware that the root component isn't really any different from any oth",
  "imgUrl": "/life/test_life_3.jpeg",
  "createdDate": "2020-05-03"
},{
  "_id": {
    "$oid": "60ad0bc6fcabf0d99f5b6830"
  },
  "parent": "life",
  "title": "test_life_4",
  "tags": [
    "Delicacy"
  ],
  "abstracts": "There are various other component options that add user-defined properties to the component instance, such as `methods`, `props`, `computed`, `inject` and `setup`. We'll discuss each of these in depth later in the guide. All of the properties of the component instance, no matter how they are defined, will be accessible in the component's template.  Vue also exposes some built-in properties via the component instance, such as `$attrs` and `$emit`. These properties all have a `$` prefix to avoid conflicting with user-defined property names.",
  "imgUrl": "/life/test_life_4.jpeg",
  "createdDate": "2020-05-04"
},{
  "_id": {
    "$oid": "60ad0bcafcabf0d99f5b6831"
  },
  "parent": "life",
  "title": "test_life_5",
  "tags": [
    "Travel",
    "Delicacy"
  ],
  "abstracts": "When a ref is returned as a property on the render context (the object returned from setup()) and accessed in the template, it automatically shallow unwraps the inner value. Only the nested ref will require .value in the template:",
  "imgUrl": "/life/test_life_5.jpeg",
  "createdDate": "2020-05-05"
}]